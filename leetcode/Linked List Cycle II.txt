
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
# 找出从哪个节点开始循环
Note: Do not modify the linked list.

解题思路
先由快慢指针检测链表上是否存在环
如果环存在，根据相遇点到环入口点的距离 = 链表起始点到环入口点的距离，我们可以同时从D点（链表起始点）和B点（相遇点）循环两个指针
两个会最终指向A点，即，环的起始点

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
:
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
		
		if not head：
			return None
		
		fast,slow = head,head
		
		while fast and fast.next:
			fast = fast.next.next
			slow = slow.next
			if fast == slow:   # 快慢指针相遇说明存在环
				# first代表链表的起始点
				# slow代表着相遇点
				first = head
				while first != slow:  # 从相遇点和链表起始点同时循环两个指针，直到二者相遇，相遇点就是环起始点
					first = first.next
					slow = slow.next
				return first
		return None