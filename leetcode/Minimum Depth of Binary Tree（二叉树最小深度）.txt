Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

给定一个二叉树，求其最小深度。 
最小深度指的是，从根节点到最近的叶子节点的最近路径的节点个数。

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# DFS遍历
class Solution:
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        if not root.left:
            return 1 + self.minDepth(root.right)
        elif not root.right:
            return 1 + self.minDepth(root.left)
        else:
            return 1 + min(self.minDepth(root.left),self.minDepth(root.right))
			
# BFS
		if not root:
            return 0
        result = [root]
        depth = 0
        while result:
            depth += 1
            queue = []
            for i in result:
                if not i.left and not i.right:
                    return depth # 一开始我是多创建了一个list保存所有到达的深度
                if i.left:
                    queue.append(i.left)
                if i.right:
                    queue.append(i.right)
            result = queue
        return depth