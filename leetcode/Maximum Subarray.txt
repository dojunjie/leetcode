Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

#这是一道非常经典的动态规划的题目，用到的思路我们在别的动态规划题目中也很常用，以后我们称为”局部最优和全局最优解法“。

1.将每一个nums[i]的值，看成是存放前面相邻的和大于0的序列 满足题意的答案。
2.通过for i in range(1, len(nums)): 遍历数据，纠正错误存放的值
3.遍历之后nums[i]中的每一个数存放的都将是序号i前面相邻数据的“最大和”（当前面的相邻数和小于0时，存放的就是当前值numsi）

for i in range(1, len(nums)):
        if nums[i-1] > 0:
            nums[i] += nums[i-1]
    return max(nums)